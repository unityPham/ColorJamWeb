[1,["33jbn7Cc9C0q+yI3x+/RTP","ecpdLyjvZBwrvm+cedCcQy","177WqkMtpP6IghZ1hSjySR","ebYkZRRZJERYQ/kUD+eywJ","a8XiHs3TJE84aTTZXgIHzv","4621fSL9pL7KNUdErhvfVk","ec5qI/6lJGFqytTB0y78Hw","25yE3uGBNA3owOL22Hnm7z","39CEbQJyBHAIbjQx0ZRklx"],["node","_spriteFrame","_textureSetter","_effectAsset","root","maskComp","maskNode","data"],[["cc.Node",["_name","_active","_components","_prefab","_contentSize","_anchorPoint","_parent","_children","_color"],1,9,4,5,5,1,2,5],"cc.SpriteFrame",["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],2,11],["cc.Material",["_name","_techniqueData"],1],["cc.Prefab",["_name"],2],["cc.Node",["_name","_parent","_children","_components","_prefab","_contentSize","_anchorPoint"],2,1,2,2,4,5,5],["cc.BoxCollider",["tag","node","_offset"],2,1,5],["e2aecuPpbxJx7TJw2fjno6A",["node","maskNode","maskComp","colors"],3,1,1,1,12],["cc.Sprite",["_type","_sizeMode","node","_materials","_spriteFrame"],1,1,3,6],["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","node"],0,1],["cc.Mask",["_type","node","_materials"],2,1,3]],[[2,0,1,2,2],[10,0,1,2,3,4,3],[3,0,1,2,4],[4,0,1,2],[5,0,1,3],[6,0,2],[0,0,7,2,3,4,5,2],[0,0,6,2,3,8,4,5,2],[0,0,1,6,2,3,4,5,3],[7,0,1,2,3,4,5,6,2],[8,0,1,2,2],[9,0,1,2,3,1],[2,1,2,1],[11,0,1,2,3,4],[12,0,1,2,2]],[[[{"name":"PA_Up_Down_1_1","rect":[30,7,40,81],"offset":[0,2.5],"originalSize":[100,100],"capInsets":[4,33.5,5,31.5]}],[1],0,[0],[2],[2]],[[[2,"block",[{"hash":2822933839,"record":null,"name":"block|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec3 a_position;\nin mediump vec2 a_uv0;\nin vec4 a_color;\nout mediump vec2 v_uv0;\nout vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}","frag":"\nprecision highp float;\nuniform sampler2D texture;\nuniform Constants {\n  vec4 outlineColor;\n  float blurIntensity;\n  float outlineWidth;\n  float outlineIntensity;\n  float padding;\n};\nin mediump vec2 v_uv0;\nin vec4 v_color;\nvoid main () {\n  vec4 originalColor = texture2D(texture, v_uv0);\n  vec4 left = texture2D(texture, v_uv0 + vec2(-blurIntensity, 0.0));\n  vec4 right = texture2D(texture, v_uv0 + vec2(blurIntensity, 0.0));\n  vec4 up = texture2D(texture, v_uv0 + vec2(0.0, -blurIntensity));\n  vec4 down = texture2D(texture, v_uv0 + vec2(0.0, blurIntensity));\n  vec4 blurColor = (originalColor * 0.4 + left * 0.15 + right * 0.15 + up * 0.15 + down * 0.15);\n  vec2 outlineOffsets[8];\n  outlineOffsets[0] = vec2(-1.0, -1.0);\n  outlineOffsets[1] = vec2( 0.0, -1.0);\n  outlineOffsets[2] = vec2( 1.0, -1.0);\n  outlineOffsets[3] = vec2(-1.0,  0.0);\n  outlineOffsets[4] = vec2( 1.0,  0.0);\n  outlineOffsets[5] = vec2(-1.0,  1.0);\n  outlineOffsets[6] = vec2( 0.0,  1.0);\n  outlineOffsets[7] = vec2( 1.0,  1.0);\n  float outline = 0.0;\n  float centerAlpha = originalColor.a;\n  for (int i = 0; i < 8; i++) {\n    vec2 sampleUV = v_uv0 + outlineOffsets[i] * outlineWidth;\n    vec4 sampleColor = texture2D(texture, sampleUV);\n    if (centerAlpha > 0.1 && sampleColor.a < 0.1) {\n      outline = 1.0;\n      break;\n    }\n  }\n  vec4 finalColor = blurColor;\n  if (outline > 0.3) {\n    vec4 intensifiedOutline = outlineColor;\n    finalColor = mix(blurColor, intensifiedOutline, 0.8);\n  }\n  gl_FragColor = finalColor * v_color;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute mediump vec2 a_uv0;\nattribute vec4 a_color;\nvarying mediump vec2 v_uv0;\nvarying vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}","frag":"\nprecision highp float;\nuniform sampler2D texture;\nuniform vec4 outlineColor;\nuniform float blurIntensity;\nuniform float outlineWidth;\nvarying mediump vec2 v_uv0;\nvarying vec4 v_color;\nvoid main () {\n  vec4 originalColor = texture2D(texture, v_uv0);\n  vec4 left = texture2D(texture, v_uv0 + vec2(-blurIntensity, 0.0));\n  vec4 right = texture2D(texture, v_uv0 + vec2(blurIntensity, 0.0));\n  vec4 up = texture2D(texture, v_uv0 + vec2(0.0, -blurIntensity));\n  vec4 down = texture2D(texture, v_uv0 + vec2(0.0, blurIntensity));\n  vec4 blurColor = (originalColor * 0.4 + left * 0.15 + right * 0.15 + up * 0.15 + down * 0.15);\n  vec2 outlineOffsets[8];\n  outlineOffsets[0] = vec2(-1.0, -1.0);\n  outlineOffsets[1] = vec2( 0.0, -1.0);\n  outlineOffsets[2] = vec2( 1.0, -1.0);\n  outlineOffsets[3] = vec2(-1.0,  0.0);\n  outlineOffsets[4] = vec2( 1.0,  0.0);\n  outlineOffsets[5] = vec2(-1.0,  1.0);\n  outlineOffsets[6] = vec2( 0.0,  1.0);\n  outlineOffsets[7] = vec2( 1.0,  1.0);\n  float outline = 0.0;\n  float centerAlpha = originalColor.a;\n  for (int i = 0; i < 8; i++) {\n    vec2 sampleUV = v_uv0 + outlineOffsets[i] * outlineWidth;\n    vec4 sampleColor = texture2D(texture, sampleUV);\n    if (centerAlpha > 0.1 && sampleColor.a < 0.1) {\n      outline = 1.0;\n      break;\n    }\n  }\n  vec4 finalColor = blurColor;\n  if (outline > 0.3) {\n    vec4 intensifiedOutline = outlineColor;\n    finalColor = mix(blurColor, intensifiedOutline, 0.8);\n  }\n  gl_FragColor = finalColor * v_color;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[],"samplers":[]}},"defines":[],"blocks":[{"name":"Constants","binding":0,"members":[{"name":"outlineColor","type":16,"count":1},{"name":"blurIntensity","type":13,"count":1},{"name":"outlineWidth","type":13,"count":1},{"name":"outlineIntensity","type":13,"count":1},{"name":"padding","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"block|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"blurIntensity":{"type":13,"value":[0.005],"range":[0,0.02]},"outlineWidth":{"type":13,"value":[0.002],"range":[0,0.01]},"outlineColor":{"type":16,"value":[1,1,1,1],"inspector":{"type":"color"}},"outlineIntensity":{"type":13,"value":[1],"range":[0.5,2]}}}]}]]],0,0,[],[],[]],[[{"name":"PA_Grid_9_1","rect":[1,1,198,198],"offset":[0,0],"originalSize":[200,200],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[[[3,"high-light",[{},"0",11,[{"defines":{}},"props",11,[{"blurIntensity":0,"outlineWidth":0.01},"outlineColor",8,[4,4283782485]]]]]],0,0,[0],[3],[0]],[[[4,"blur",{"0":{"props":{"blurIntensity":0},"defines":{}}}]],0,0,[0],[3],[0]],[[[5,"BJBlock"],[6,"BJBlock",[-6,-7],[[10,100,-2,[0,50,50]],[11,-5,-4,-3,[[[4,4280822015],[4,4280492917],[4,4294261712],[4,4288124823],[4,4294925877],[4,4282646339],[4,4278226943],[4,4284219466],[4,4278253055],[4,4294941435]],8,8,8,8,8,8,8,8,8,8]]],[12,-1,0],[5,100,100],[0,0,0]],[9,"mask",1,[-9],[-8],[0,"b7N4FB5glDmIYpdNvyz31X",1,0],[5,200,200],[0,0,0]],[7,"icon",2,[[1,2,0,-10,[0,1],2],[13,45,100,100,-11]],[0,"36rxHAzHdMV67T+Koledip",1,0],[4,4284835327],[5,200,200],[0,0,0]],[14,2,2,[3]],[8,"icon_dir",false,1,[[1,1,0,-12,[4],5]],[0,"6cyHE8YzFHLbtARTAYj7Zm",1,0],[5,43,43],[0,0,0]]],0,[0,4,1,0,0,1,0,5,4,0,6,2,0,0,1,0,-1,2,0,-2,5,0,-1,4,0,-1,3,0,0,3,0,0,3,0,0,5,0,7,1,12],[0,0,0,0,0,0,4],[-1,-2,1,-1,-1,1,1],[4,5,6,1,1,7,8]]]]